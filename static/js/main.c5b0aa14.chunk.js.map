{"version":3,"sources":["components/Header/index.js","components/CharacterCards/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","id","className","clicks","highScore","CharacterCards","key","role","onClick","handleDivClick","alt","name","src","img","Footer","shuffleArray","array","i","length","randomIdx","Math","floor","random","randomValue","App","state","dbz","clickCount","clickArr","console","log","indexOf","setState","push","this","map","process","image","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"i4BAkBeA,G,YAfA,SAAAC,GAAK,OAChB,yBAAKC,GAAG,SAASC,UAAU,wBACxB,4CACA,mGACA,yBAAKA,UAAU,aACV,yBAAKA,UAAU,0BACX,yBAAKA,UAAU,aACf,2BAAOA,UAAU,YAAjB,UAAoCF,EAAMG,QAC1C,2BAAOD,UAAU,YAAjB,eAAyCF,EAAMI,WAC/C,yBAAKF,UAAU,kBCFhBG,G,MAPQ,SAAAL,GAAK,OAC1B,yBAAKM,IAAKN,EAAMC,GAAIM,KAAK,MAAML,UAAU,aAAaM,QAAS,kBAAMR,EAAMS,eAAeT,EAAMC,MAE5F,yBAAKS,IAAKV,EAAMW,KAAMC,IAAKZ,EAAMa,SCIxBC,G,MAPA,SAAAd,GAAK,OAChB,yBAAKC,GAAG,SAASC,UAAU,wBACvB,gDACA,4D,OCEFa,EAAe,SAAAC,GACnB,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAEzC,IAAIE,EAAYC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IAC5CM,EAAcP,EAAMG,GAExBH,EAAMG,GAAaH,EAAMC,GACzBD,EAAMC,GAAKM,EAGb,OAAOP,GAkEMQ,E,2MA7DbC,MAAQ,CACNC,MACAvB,OAAQ,GACRwB,WAAY,EACZvB,UAAW,G,EAGbK,eAAiB,SAACR,GAChB,IAAI2B,EAAW,EAAKH,MAAMtB,OADH,EAES,EAAKsB,MAA/BrB,EAFiB,EAEjBA,UAAWuB,EAFM,EAENA,WACjBE,QAAQC,IAAIF,GAERA,EAASG,QAAQ9B,IAAO,EAC1B,EAAK+B,SAAS,CAAE7B,OAAQ,GAAIwB,WAAY,KAGxCA,IACAC,EAASK,KAAKhC,GACd,EAAK+B,SAAS,CAAE7B,OAAQyB,EAAUD,WAAYA,IAE1CA,EAAavB,GACf,EAAK4B,SAAS,CAAE5B,UAAWuB,IAG1BA,EAAaD,EAAIR,SAAW,GAC7B,EAAKc,SAAS,CAAC7B,OAAO,MAG1B,EAAK6B,SAAS,CAAEN,IAAKX,EAAaW,M,wEAI1B,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CACEvB,OAAQ+B,KAAKT,MAAME,WACnBvB,UAAW8B,KAAKT,MAAMrB,YAGxB,yBAAKF,UAAU,aACb,yBAAKA,UAAU,0BACdgC,KAAKT,MAAMC,IAAIS,IAAI,SAAAT,GAAG,OACrB,yBAAKxB,UAAU,8BACb,kBAAC,EAAD,CACEI,IAAKoB,EAAIzB,GACTU,KAAMe,EAAIf,KACVE,IAAKuB,eAAyBV,EAAIW,MAClC5B,eAAgB,EAAKA,eACrBR,GAAIyB,EAAIzB,UAMhB,kBAAC,EAAD,W,GAzDUqC,aCTEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c5b0aa14.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst Header = props => (\n    <div id=\"header\" className=\"bg-dark text-warning\">\n       <h1>Dragonball Z</h1>\n       <h4>Clicky Game - Click an image, but don't click the same image twice!</h4>\n       <div className=\"container\">\n            <div className=\"row align-items-center\">\n                <div className=\"col-md-3\"></div>\n                <label className=\"col-md-3\">Score: {props.clicks}</label>\n                <label className=\"col-md-3\">High Score: {props.highScore}</label>\n                <div className=\"col-md-3\"></div>\n            </div>\n        </div>\n    </div>\n);\n\nexport default Header;","import React from \"react\";\nimport \"./style.css\";\n\nconst CharacterCards = props => (\n  <div key={props.id} role=\"img\" className=\"click-item\" onClick={() => props.handleDivClick(props.id)} >\n        \n      <img alt={props.name} src={props.img} />\n  </div>\n);\n\nexport default CharacterCards;","import React from \"react\";\nimport \"./style.css\";\n\nconst Footer = props => (\n    <div id=\"footer\" className=\"bg-dark text-warning\">\n        <h5>DBZ Clicky Game!</h5>\n        <h6>Created by: Nick Oetinger</h6>\n    </div>\n);\n\nexport default Footer;","import React, { Component } from \"react\";\nimport './App.css';\nimport Header from \"./components/Header\";\nimport CharacterCards from \"./components/CharacterCards\";\nimport Footer from \"./components/Footer\";\nimport dbz from \"./dbz.json\";\n\n//Shuffle Cards Array\nconst shuffleArray = array => {\n  for (let i = array.length - 1; i > 0; i--) {\n\n    let randomIdx = Math.floor(Math.random() * (i + 1))\n    let randomValue = array[randomIdx]\n\n    array[randomIdx] = array[i]\n    array[i] = randomValue\n\n  }\n  return array;\n}\n\nclass App extends Component {\n  //States\n  state = {\n    dbz,\n    clicks: [],\n    clickCount: 0,\n    highScore: 0,\n  };\n  //Click event handler\n  handleDivClick = (id) => {\n    let clickArr = this.state.clicks\n    let { highScore, clickCount } = this.state\n    console.log(clickArr)\n\n    if (clickArr.indexOf(id) > -1) {\n      this.setState({ clicks: [], clickCount: 0})\n      \n    } else {\n      clickCount++\n      clickArr.push(id)\n      this.setState({ clicks: clickArr, clickCount: clickCount })\n\n      if (clickCount > highScore) {\n        this.setState({ highScore: clickCount })\n      }\n\n      if(clickCount % dbz.length === 0){\n        this.setState({clicks:[]})\n      }\n    }\n    this.setState({ dbz: shuffleArray(dbz) })\n\n  };\n  //Render to DOM\n  render() {\n    return (\n      <div>\n        <Header \n          clicks={this.state.clickCount} \n          highScore={this.state.highScore} \n        />\n\n        <div className=\"container\">\n          <div className=\"row align-items-center\">\n          {this.state.dbz.map(dbz => (\n            <div className=\"col-sm-4 align-self-center\">\n              <CharacterCards \n                key={dbz.id} \n                name={dbz.name} \n                img={process.env.PUBLIC_URL + dbz.image} \n                handleDivClick={this.handleDivClick} \n                id={dbz.id} \n              />\n            </div>\n            ))}\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}